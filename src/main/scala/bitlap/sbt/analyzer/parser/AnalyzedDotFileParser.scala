package bitlap
package sbt
package analyzer
package parser

import scala.jdk.CollectionConverters.*

import com.intellij.buildsystem.model.unified.UnifiedCoordinates
import com.intellij.openapi.externalSystem.model.project.dependencies.*

import analyzer.util.DependencyUtils
import analyzer.util.DependencyUtils.*
import guru.nidi.graphviz.model.{ Graph as _, * }
import model.*

/** Parse the dot file generated by task `dependencyDot`. dot file: sees
 *  https://en.wikipedia.org/wiki/DOT_(graph_description_language)
 */
object AnalyzedDotFileParser:
  lazy val instance: AnalyzedFileParser = new AnalyzedDotFileParser
end AnalyzedDotFileParser

final class AnalyzedDotFileParser extends AnalyzedFileParser:

  import AnalyzedDotFileParser.*

  override val fileType: AnalyzedFileType = AnalyzedFileType.Dot

  /** transforming dependencies data into view data
   */
  private def toDependencyNode(dep: ArtifactInfo): DependencyNode = {
    // module dependency
    val node = new ArtifactDependencyNodeImpl(dep.id.toLong, dep.group, dep.artifact, dep.version)
    node.setResolutionState(ResolutionState.RESOLVED)
    node
  }

  private def buildChildrenRelationsData(
    dependencies: Dependencies,
    depMap: Map[String, DependencyNode]
  ): (Map[String, String], Map[String, List[Int]]) = {
    val maxId =
      dependencies.dependencies.view
        .map(_.id)
        .sortWith((a, b) => a > b)
        .headOption
        .getOrElse(0)
    val graph = new Graph(maxId + 1)
    val relationLabelsMap = dependencies.relations.map { r =>
      graph.addEdge(r.head, r.tail)
      s"${r.head}-${r.tail}" -> r.label
    }.toMap
    // find children all nodes,there may be indirect dependencies here.
    val parentChildrenMap = depMap.values.toSet.toSeq.map { topNode =>
      val path = graph
        .dfs(topNode.getId.toInt)
        .tail
        .map(_.intValue())
        .filter(childId => filterOnlyDirectlyChild(topNode, childId, dependencies.relations))
      topNode.getId.toString -> path.toList
    }
    (relationLabelsMap, parentChildrenMap.toMap)
  }

  /** build tree for dependency analyzer view
   */
  override def buildDependencyTree(
    context: ModuleContext,
    root: DependencyScopeNode,
    declared: List[UnifiedCoordinates]
  ): DependencyScopeNode = {
    val data                       = getDependencyRelations(context)
    val dependencies: Dependencies = data.orNull
    val depMap = data.map(_.dependencies.map(a => a.id.toString -> toDependencyNode(a)).toMap).getOrElse(Map.empty)

    // if no relations for dependency object
    if (dependencies == null || dependencies.relations.isEmpty) {
      val excludeSelfNode = depMap.values.toSeq.filterNot(d => isSelfModule(d, context))
      appendChildrenAndFixProjectNodes(root, excludeSelfNode, context)
      return root
    }
    // build graph
    val (relationLabelsMap, parentChildrenMap) = buildChildrenRelationsData(dependencies, depMap)
    // get self
    val selfNode = depMap.values.toSet.toSeq.filter(d => isSelfModule(d, context))
    // append children for self
    selfNode.foreach { node =>
      buildNodes(node, parentChildrenMap, depMap, relationLabelsMap, context, dependencies.relations)
    }

    // transfer from self to root
    selfNode.foreach(d => root.getDependencies.addAll(d.getDependencies))
    root
  }

  /** This is important to filter out non-direct dependencies
   */
  private def filterOnlyDirectlyChild(parent: DependencyNode, childId: Int, relations: List[Relation]) = {
    relations.exists(r => r.head == parent.getId && r.tail == childId)
  }

  /** Recursively create and add child nodes to root
   */
  private def buildNodes(
    parentNode: DependencyNode,
    parentChildrenMap: Map[String, List[Int]],
    depMap: Map[String, DependencyNode],
    relationLabelsMap: Map[String, String],
    context: ModuleContext,
    relations: List[Relation]
  ): Unit = {
    val childIds = parentChildrenMap
      .getOrElse(parentNode.getId.toString, List.empty)
      .filter(cid => filterOnlyDirectlyChild(parentNode, cid, relations))
    if (childIds.isEmpty) return
    val childNodes = childIds.flatMap { id =>
      depMap
        .get(id.toString)
        .map {
          case d @ (_: ArtifactDependencyNodeImpl) =>
            val label   = relationLabelsMap.getOrElse(s"${parentNode.getId}-$id", "")
            val newNode = new ArtifactDependencyNodeImpl(d.getId, d.getGroup, d.getModule, d.getVersion)
            if (label != null && label.nonEmpty) {
              newNode.setSelectionReason(label)
            }
            newNode.setResolutionState(d.getResolutionState)
            newNode
          case d => d
        }
        .toList
    }
    childNodes.foreach(d => buildNodes(d, parentChildrenMap, depMap, relationLabelsMap, context, relations))
    appendChildrenAndFixProjectNodes(parentNode, childNodes, context)
  }

  /** parse dot file, get graph data
   */
  private def getDependencyRelations(context: ModuleContext): Option[Dependencies] =
    val mutableGraph: MutableGraph = DotUtil.parseAsGraph(context)
    if (mutableGraph == null) None
    else
      val graphNodes: java.util.Collection[MutableNode] = mutableGraph.nodes()
      val links: java.util.Collection[Link]             = mutableGraph.edges()

      val nodes = graphNodes.asScala.map { graphNode =>
        graphNode.name().value() -> getArtifactInfoFromDisplayName(graphNode.name().value())
      }.collect { case (name, Some(value)) =>
        name -> value
      }.toMap

      val idMapping: Map[String, Int] = nodes.map(kv => kv._2.toString -> kv._2.id)

      val edges = links.asScala.map { l =>
        val label = l.get("label").asInstanceOf[String]
        Relation(
          idMapping.getOrElse(l.from().name().value(), 0),
          idMapping.getOrElse(l.to().name().value(), 0),
          label
        )
      }

      Some(
        Dependencies(
          nodes.values.toList,
          edges.toList
        )
      )

end AnalyzedDotFileParser
