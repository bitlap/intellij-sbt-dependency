package bitlap.sbt.analyzer;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

/**
 * @author 梦境迷离
 * @version 1.0, 2023/9/8
 */
@SuppressWarnings("unchecked")
public class SbtDependencyAnalyzerPanel {
    public JPanel mainPanel;

    public JComboBox language;
    public JList scopePanel;
    public JList modulesPanel;
    public JTextField organization;
    public JTextArea IgnoreModules;
    public JTextArea ignoreScopes;
    private SettingsState settings;

    boolean isModified() {
        // TODO
        return true;

    }

    boolean applyTo() {
        // TODO
        return true;
    }

    void from() {
        // TODO
    }


    public SbtDependencyAnalyzerPanel(SettingsState settings) {
        this.settings = settings;
    }

    public JComboBox getLanguage() {
        return language;
    }

    public void setAnalyzerLang(JComboBox Language) {
        this.language = Language;
    }

    public JList getScopePanel() {
        return scopePanel;
    }

    public void setScopePanel(JList scopePanel) {
        this.scopePanel = scopePanel;
    }

    public JList getModulesPanel() {
        return modulesPanel;
    }

    public void setModulesPanel(JList modulesPanel) {
        this.modulesPanel = modulesPanel;
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public void setMainPanel(JPanel mainPanel) {
        this.mainPanel = mainPanel;
    }

    public JTextField getOrganization() {
        return organization;
    }

    public void setOrganization(JTextField organization) {
        this.organization = organization;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setAlignmentX(0.5f);
        mainPanel.setAlignmentY(0.5f);
        mainPanel.setAutoscrolls(false);
        mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, mainPanel.getFont()), null));
        final JLabel label1 = new JLabel();
        label1.setText("Language");
        mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(56, 17), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Ignore Scopes");
        mainPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(56, 17), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Ignore Modules");
        mainPanel.add(label3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(56, 17), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Organization");
        mainPanel.add(label4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(56, 17), null, 0, false));
        IgnoreModules = new JTextArea();
        IgnoreModules.setColumns(0);
        IgnoreModules.setText("");
        mainPanel.add(IgnoreModules, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, -1), null, 0, false));
        language = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("zh_CN");
        defaultComboBoxModel1.addElement("en_US");
        language.setModel(defaultComboBoxModel1);
        mainPanel.add(language, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        organization = new JTextField();
        mainPanel.add(organization, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        ignoreScopes = new JTextArea();
        ignoreScopes.setRows(0);
        ignoreScopes.setText("");
        ignoreScopes.setToolTipText("");
        ignoreScopes.setWrapStyleWord(false);
        mainPanel.add(ignoreScopes, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
